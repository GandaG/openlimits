{"message":"failed to resolve: could not find `wasm_bindgen_test` in `{{root}}`","code":{"code":"E0433","explanation":"An undeclared type or module was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type or module `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n"},"level":"error","spans":[{"file_name":"tests/requester.rs","byte_start":711,"byte_end":724,"line_start":34,"line_end":34,"column_start":1,"column_end":14,"is_primary":true,"text":[{"text":"#[cross_test]","highlight_start":1,"highlight_end":14}],"label":"could not find `wasm_bindgen_test` in `{{root}}`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"tests/requester.rs","byte_start":711,"byte_end":724,"line_start":34,"line_end":34,"column_start":1,"column_end":14,"is_primary":false,"text":[{"text":"#[cross_test]","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[cross_test]","def_site_span":{"file_name":"/home/notdanilo/.cargo/registry/src/github.com-1ecc6299db9ec823/wasm-bindgen-test-macro-0.3.20/src/lib.rs","byte_start":259,"byte_end":2492,"line_start":13,"line_end":77,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub fn wasm_bindgen_test(","highlight_start":1,"highlight_end":1},{"text":"    attr: proc_macro::TokenStream,","highlight_start":1,"highlight_end":1},{"text":"    body: proc_macro::TokenStream,","highlight_start":1,"highlight_end":1},{"text":") -> proc_macro::TokenStream {","highlight_start":1,"highlight_end":1},{"text":"    let mut attr = attr.into_iter();","highlight_start":1,"highlight_end":1},{"text":"    let mut r#async = false;","highlight_start":1,"highlight_end":1},{"text":"    while let Some(token) = attr.next() {","highlight_start":1,"highlight_end":1},{"text":"        match &token {","highlight_start":1,"highlight_end":1},{"text":"            proc_macro::TokenTree::Ident(i) if i.to_string() == \"async\" => r#async = true,","highlight_start":1,"highlight_end":1},{"text":"            _ => panic!(\"malformed `#[wasm_bindgen_test]` attribute\"),","highlight_start":1,"highlight_end":1},{"text":"        }","highlight_start":1,"highlight_end":1},{"text":"        match &attr.next() {","highlight_start":1,"highlight_end":1},{"text":"            Some(proc_macro::TokenTree::Punct(op)) if op.as_char() == ',' => {}","highlight_start":1,"highlight_end":1},{"text":"            Some(_) => panic!(\"malformed `#[wasm_bindgen_test]` attribute\"),","highlight_start":1,"highlight_end":1},{"text":"            None => break,","highlight_start":1,"highlight_end":1},{"text":"        }","highlight_start":1,"highlight_end":1},{"text":"    }","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let mut body = TokenStream::from(body).into_iter();","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Skip over other attributes to `fn #ident ...`, and extract `#ident`","highlight_start":1,"highlight_end":1},{"text":"    let mut leading_tokens = Vec::new();","highlight_start":1,"highlight_end":1},{"text":"    while let Some(token) = body.next() {","highlight_start":1,"highlight_end":1},{"text":"        leading_tokens.push(token.clone());","highlight_start":1,"highlight_end":1},{"text":"        if let TokenTree::Ident(token) = token {","highlight_start":1,"highlight_end":1},{"text":"            if token == \"async\" {","highlight_start":1,"highlight_end":1},{"text":"                r#async = true;","highlight_start":1,"highlight_end":1},{"text":"            }","highlight_start":1,"highlight_end":1},{"text":"            if token == \"fn\" {","highlight_start":1,"highlight_end":1},{"text":"                break;","highlight_start":1,"highlight_end":1},{"text":"            }","highlight_start":1,"highlight_end":1},{"text":"        }","highlight_start":1,"highlight_end":1},{"text":"    }","highlight_start":1,"highlight_end":1},{"text":"    let ident = find_ident(&mut body).expect(\"expected a function name\");","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let mut tokens = Vec::<TokenTree>::new();","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let test_body = if r#async {","highlight_start":1,"highlight_end":1},{"text":"        quote! { cx.execute_async(test_name, #ident); }","highlight_start":1,"highlight_end":1},{"text":"    } else {","highlight_start":1,"highlight_end":1},{"text":"        quote! { cx.execute_sync(test_name, #ident); }","highlight_start":1,"highlight_end":1},{"text":"    };","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We generate a `#[no_mangle]` with a known prefix so the test harness can","highlight_start":1,"highlight_end":1},{"text":"    // later slurp up all of these functions and pass them as arguments to the","highlight_start":1,"highlight_end":1},{"text":"    // main test harness. This is the entry point for all tests.","highlight_start":1,"highlight_end":1},{"text":"    let name = format!(\"__wbgt_{}_{}\", ident, CNT.fetch_add(1, Ordering::SeqCst));","highlight_start":1,"highlight_end":1},{"text":"    let name = Ident::new(&name, Span::call_site());","highlight_start":1,"highlight_end":1},{"text":"    tokens.extend(","highlight_start":1,"highlight_end":1},{"text":"        (quote! {","highlight_start":1,"highlight_end":1},{"text":"            #[no_mangle]","highlight_start":1,"highlight_end":1},{"text":"            pub extern \"C\" fn #name(cx: &::wasm_bindgen_test::__rt::Context) {","highlight_start":1,"highlight_end":1},{"text":"                let test_name = concat!(module_path!(), \"::\", stringify!(#ident));","highlight_start":1,"highlight_end":1},{"text":"                #test_body","highlight_start":1,"highlight_end":1},{"text":"            }","highlight_start":1,"highlight_end":1},{"text":"        })","highlight_start":1,"highlight_end":1},{"text":"        .into_iter(),","highlight_start":1,"highlight_end":1},{"text":"    );","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    tokens.extend(leading_tokens);","highlight_start":1,"highlight_end":1},{"text":"    tokens.push(ident.into());","highlight_start":1,"highlight_end":1},{"text":"    tokens.extend(body);","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    tokens.into_iter().collect::<TokenStream>().into()","highlight_start":1,"highlight_end":1},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: could not find `wasm_bindgen_test` in `{{root}}`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/requester.rs:34:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m34\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m#[cross_test]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcould not find `wasm_bindgen_test` in `{{root}}`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in an attribute macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"aborting due to previous error","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to previous error\u001b[0m\n\n"}
{"message":"For more information about this error, try `rustc --explain E0433`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0433`.\u001b[0m\n"}
